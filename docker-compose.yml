services:
  # PostgreSQL Database
  postgres:
    image: postgres:14.18-bookworm
    container_name: devops-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: ${DB_USER:-dbadmin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dbpassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dbadmin} -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # HashiCorp Vault 
  vault:
    image: hashicorp/vault:1.20
    container_name: devops-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://127.0.0.1:8200
      VAULT_TOKEN: myroot
    ports:
      - "8200:8200"
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Service (multiple instances for load balancing)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-backend-1
    environment:
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: userdb
      DB_USER: ${DB_USER:-dbadmin}
      DB_PASSWORD: ${DB_PASSWORD:-dbpassword123}
      VAULT_ADDR: http://vault:8200
      VAULT_ROLE_ID: ${VAULT_ROLE_ID:-}
      VAULT_SECRET_ID: ${VAULT_SECRET_ID:-}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
      vault-init:
        condition: service_completed_successfully
    networks:
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie=false"
      - "traefik.http.routers.backend.entrypoints=web"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-backend-2
    environment:
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: userdb
      DB_USER: ${DB_USER:-dbadmin}
      DB_PASSWORD: ${DB_PASSWORD:-dbpassword123}
      VAULT_ADDR: http://vault:8200
      VAULT_ROLE_ID: ${VAULT_ROLE_ID:-}
      VAULT_SECRET_ID: ${VAULT_SECRET_ID:-}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
      vault-init:
        condition: service_completed_successfully
    networks:
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie=false"
      - "traefik.http.routers.backend.entrypoints=web"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Traefik Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.5.0-rc2
    container_name: devops-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
      - "--accesslog=true"  
      - "--ping=true"
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Vault initialization service
  vault-init:
    image: hashicorp/vault:1.20
    container_name: devops-vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: myroot
    volumes:
      - ./scripts/init-vault.sh:/init-vault.sh:ro
    entrypoint: ["/bin/sh", "/init-vault.sh"]
    networks:
      - backend-net

networks:
  backend-net:
    driver: bridge

volumes:
  postgres_data: